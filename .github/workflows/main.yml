name: Android Build & Security Scan

on:
  push:
    branches: 
      - master

jobs:
  build:
    name: Build APK & Scan with MobSF
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Inject RASP Dependency into build.gradle
        run: |
          if [ -f "app/build.gradle.kts" ]; then
            echo "Adicionando dependência no app/build.gradle.kts..."
            sed -i '/repositories {/a \
                mavenCentral()' app/build.gradle.kts

            sed -i '/dependencies {/a \
                implementation("com.securevale:rasp-android:0.1.0")' app/build.gradle.kts
          elif [ -f "app/build.gradle" ]; then
            echo "Adicionando dependência no app/build.gradle..."
            sed -i '/repositories {/a \
                mavenCentral()' app/build.gradle

            sed -i '/dependencies {/a \
                implementation "com.securevale:rasp-android:0.1.0"' app/build.gradle
          else
            echo "Erro: Nenhum build.gradle encontrado!"
            exit 1
          fi
          
      - name: Injection rasp
        run: |
          chmod +x ./inject_rasp.sh
          ./inject_rasp.sh

      - name: Grant execute permission for Gradle
        run: chmod +x ./gradlew

      - name: Build Debug APK
        run: ./gradlew assembleDebug

      - name: Upload APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ovaa-app
          path: app/build/outputs/apk/debug/app-debug.apk

      - name: Build Release APK
        run: ./gradlew assembleRelease -type f

      - name: Upload Realase Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ovaa-app-release
          path: app/build/outputs/apk/release/*.apk
      
      - name: Upload Mapping File (ProGuard)
        uses: actions/upload-artifact@v4
        with:
          name: ProGuard-Mapping
          path: app/build/outputs/mapping/release/mapping.txt

  
  test_proguard:
    name: Teste de Ofuscação do ProGuard
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Baixar APK de Release
        uses: actions/download-artifact@v4
        with:
          name: ovaa-app
          path: app/build/outputs/apk/release/
          
      - name: Baixar ProGuard
        uses: actions/download-artifact@v4
        with:
          name: ProGuard-Mapping
          path: app/build/outputs/apk/release/

      - name: Verificar se ProGuard está Ativo
        run: |
          APK_FILE="app/build/outputs/apk/release/app-release.apk"
          MAPPING_FILE="app/build/outputs/apk/release/mapping.txt"

          if [ ! -f "$MAPPING_FILE" ]; then
            echo "❌ ERRO: O arquivo mapping.txt não foi gerado! ProGuard pode não estar ativo."
            exit 1
          fi

          echo "✅ ProGuard está ativo. Verificando a ofuscação do código..."

          if grep -q "oversecured.ovaa.utils.ProGuardCheck" "$MAPPING_FILE"; then
            # Captura o novo nome da classe
            OBFUSCATED_NAME=$(grep "oversecured.ovaa.utils.ProGuardCheck ->" "$MAPPING_FILE" | awk '{print $NF}')

            if [ -z "$OBFUSCATED_NAME" ]; then
              echo "❌ ERRO: A classe ProGuardCheck NÃO foi ofuscada! ProGuard pode estar desativado."
              exit 1
            else
              echo "✅ A classe ProGuardCheck foi ofuscada corretamente como '$OBFUSCATED_NAME'!"
            fi
          else
            echo "⚠️ ALERTA: A classe ProGuardCheck NÃO foi encontrada no mapping.txt."
            echo "ℹ️ Isso pode indicar que ela foi completamente removida pelo ProGuard."
          fi


  security_scan:
    name: MobSF Security Scan
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Download APK from Build
        uses: actions/download-artifact@v4
        with:
          name: ovaa-app
          path: app/build/outputs/apk/debug/

      - name: Upload APK to MobSF API
        run: |
          APK_FILE="app/build/outputs/apk/debug/app-debug.apk"
          MOBS_URL="${{ secrets.AWS_MOBSF_IP }}/api/v1/upload"
          API_KEY="${{ secrets.MOBSF_API_KEY }}"
          echo "Enviando APK para análise no MobSF..."
          RESPONSE=$(curl -X POST "$MOBS_URL" -H "Authorization: $API_KEY" -F "file=@$APK_FILE")
          SCAN_ID=$(echo $RESPONSE | jq -r '.hash')
          if [ -z "$SCAN_ID" ] || [ "$SCAN_ID" == "null" ]; then
            echo "❌ Erro ao enviar o APK para análise!"
            exit 1
          fi
          echo "SCAN_ID=$SCAN_ID" >> $GITHUB_ENV

      - name: Iniciar análise estática com o Hash
        run: |
          ANALYSIS_URL="${{ secrets.AWS_MOBSF_IP }}/api/v1/scan"
          API_KEY="${{ secrets.MOBSF_API_KEY }}"
          echo "Iniciando análise estática no MobSF..."
          RESPONSE=$(curl -X POST "$ANALYSIS_URL" -H "Authorization: $API_KEY" -d "hash=$SCAN_ID")
          echo "Análise estática iniciada. Aguardando conclusão..."

      - name: Obter Relatório do MobSF
        run: |
          REPORT_URL="${{ secrets.AWS_MOBSF_IP }}/api/v1/report_json"
          API_KEY="${{ secrets.MOBSF_API_KEY }}"
          RESPONSE=$(curl -X POST "$REPORT_URL" -H "Authorization: $API_KEY" -d "hash=$SCAN_ID")
          echo "$RESPONSE" > mobsf_report.json

      - name: Upload Security Report
        uses: actions/upload-artifact@v4
        with:
          name: MobSF-Report
          path: mobsf_report.json

      - name: Aguardar até que o relatório da análise estática esteja pronto
        run: |
          PDF_URL="${{ secrets.AWS_MOBSF_IP }}/api/v1/download_pdf"
          API_KEY="${{ secrets.MOBSF_API_KEY }}"
          
          echo "Aguardando o relatório da análise estática ficar disponível..."
          
          while true; do
            RESPONSE=$(curl -X POST "$PDF_URL" -H "Authorization: $API_KEY" -d "hash=$SCAN_ID" --silent --output mobsf_static_report.pdf --write-out "%{http_code}")
            if [[ -f mobsf_static_report.pdf ]]; then
              echo "✅ Relatório da análise estática disponível!"
              break
            fi
            echo "⏳ Relatório ainda não disponível, aguardando..."
            sleep 10
          done

      - name: Upload Relatório Estático (PDF)
        uses: actions/upload-artifact@v4
        with:
          name: MobSF-Static-PDF-Report
          path: mobsf_static_report.pdf

      - name: Iniciar análise dinâmica com o Hash
        run: |
          DAST_URL="${{ secrets.AWS_MOBSF_IP }}/api/v1/dynamic/start_analysis"
          API_KEY="${{ secrets.MOBSF_API_KEY }}"
          echo "Iniciando análise dinâmica no MobSF..."
          RESPONSE=$(curl -X POST "$DAST_URL" -H "Authorization: $API_KEY" -d "hash=$SCAN_ID")
          echo "$RESPONSE" > dast_report.json
          echo "Análise dinâmica iniciada com sucesso."

      - name: Upload Relatório da Análise Dinâmica (JSON)
        uses: actions/upload-artifact@v4
        with:
          name: DAST-Report
          path: dast_report.json
